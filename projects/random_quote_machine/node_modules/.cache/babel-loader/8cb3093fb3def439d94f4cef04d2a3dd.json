{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\freecodecamp\\\\FCC-Front-End-Development-Projects\\\\FreeCodeCamp-Front-End-Projects\\\\random_quote_machine\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getQuote = () => new Promise((resolve, reject) => {\n  try {\n    fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\").then(response => response.json()).then(_ref => {\n      let {\n        quotes\n      } = _ref;\n      const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n      resolve(randomQuote);\n    });\n  } catch (error) {\n    reject(error);\n  }\n});\n\nfunction App() {\n  _s();\n\n  const [quote, setQuote] = useState(\"\");\n\n  function getNewQuote() {\n    getQuote().then(setQuote);\n  }\n\n  useEffect(() => {\n    getNewQuote();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"quote-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"text\",\n      children: quote.quote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"author\",\n      children: quote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"new-quote\",\n      onClick: getNewQuote,\n      children: \"New quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"twitter.com/intent/tweet\",\n      id: \"tweet-quote\",\n      children: \"Tweet quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5dMXsGVSJyMiqBXtvqhGbwvmLe8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Projects/freecodecamp/FCC-Front-End-Development-Projects/FreeCodeCamp-Front-End-Projects/random_quote_machine/src/App.js"],"names":["useEffect","useState","getQuote","Promise","resolve","reject","fetch","then","response","json","quotes","randomQuote","Math","floor","random","length","error","App","quote","setQuote","getNewQuote","author"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,MAAMC,QAAQ,GAAG,MACf,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAI;AACFC,IAAAA,KAAK,CACH,wIADG,CAAL,CAGGC,IAHH,CAGSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAHtB,EAIGF,IAJH,CAIQ,QAAgB;AAAA,UAAf;AAAEG,QAAAA;AAAF,OAAe;AACpB,YAAMC,WAAW,GAAGD,MAAM,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,MAAM,CAACK,MAAlC,CAAD,CAA1B;AACAX,MAAAA,OAAO,CAACO,WAAD,CAAP;AACD,KAPH;AAQD,GATD,CASE,OAAOK,KAAP,EAAc;AACdX,IAAAA,MAAM,CAACW,KAAD,CAAN;AACD;AACF,CAbD,CADF;;AAgBA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC;;AACA,WAASmB,WAAT,GAAuB;AACrBlB,IAAAA,QAAQ,GAAGK,IAAX,CAAgBY,QAAhB;AACD;;AACDnB,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACE;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA,4BACE;AAAG,MAAA,EAAE,EAAC,MAAN;AAAA,gBAAcF,KAAK,CAACA;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAG,MAAA,EAAE,EAAC,QAAN;AAAA,gBAAgBA,KAAK,CAACG;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,EAAE,EAAC,WAAX;AAAuB,MAAA,OAAO,EAAED,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAME;AAAG,MAAA,IAAI,EAAC,0BAAR;AAAmC,MAAA,EAAE,EAAC,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GApBQH,G;;KAAAA,G;AAsBT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst getQuote = () =>\n  new Promise((resolve, reject) => {\n    try {\n      fetch(\n        \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n      )\n        .then((response) => response.json())\n        .then(({ quotes }) => {\n          const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n          resolve(randomQuote);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n\nfunction App() {\n  const [quote, setQuote] = useState(\"\");\n  function getNewQuote() {\n    getQuote().then(setQuote);\n  }\n  useEffect(() => {\n    getNewQuote();\n  }, []);\n  return (\n    <div id=\"quote-box\">\n      <p id=\"text\">{quote.quote}</p>\n      <p id=\"author\">{quote.author}</p>\n      <button id=\"new-quote\" onClick={getNewQuote}>\n        New quote\n      </button>\n      <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\">\n        Tweet quote\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}